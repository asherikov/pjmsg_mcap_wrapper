// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Header.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__STD_MSGS_MSG_HEADER_HPP
#define FAST_DDS_GENERATED__STD_MSGS_MSG_HEADER_HPP

#include <cstdint>
#include <string>
#include <utility>
#include "Time.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(HEADER_SOURCE)
#define HEADER_DllAPI __declspec( dllexport )
#else
#define HEADER_DllAPI __declspec( dllimport )
#endif // HEADER_SOURCE
#else
#define HEADER_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define HEADER_DllAPI
#endif // _WIN32

namespace std_msgs {

namespace msg {

/*!
 * @brief This class represents the structure Header defined by the user in the IDL file.
 * @ingroup Header
 */
class Header
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Header()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Header()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            const Header& x)
    {
                    m_stamp = x.m_stamp;

                    m_frame_id = x.m_frame_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            Header&& x) noexcept
    {
        m_stamp = std::move(x.m_stamp);
        m_frame_id = std::move(x.m_frame_id);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            const Header& x)
    {

                    m_stamp = x.m_stamp;

                    m_frame_id = x.m_frame_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            Header&& x) noexcept
    {

        m_stamp = std::move(x.m_stamp);
        m_frame_id = std::move(x.m_frame_id);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Header& x) const
    {
        return (m_stamp == x.m_stamp &&
           m_frame_id == x.m_frame_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Header& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const builtin_interfaces::msg::Time& _stamp)
    {
        m_stamp = _stamp;
    }

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            builtin_interfaces::msg::Time&& _stamp)
    {
        m_stamp = std::move(_stamp);
    }

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const builtin_interfaces::msg::Time& stamp() const
    {
        return m_stamp;
    }

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport builtin_interfaces::msg::Time& stamp()
    {
        return m_stamp;
    }


    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id)
    {
        m_frame_id = _frame_id;
    }

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id)
    {
        m_frame_id = std::move(_frame_id);
    }

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const
    {
        return m_frame_id;
    }

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id()
    {
        return m_frame_id;
    }



private:

    builtin_interfaces::msg::Time m_stamp;
    std::string m_frame_id;

};

} // namespace msg

} // namespace std_msgs

#endif // _FAST_DDS_GENERATED_STD_MSGS_MSG_HEADER_HPP_


