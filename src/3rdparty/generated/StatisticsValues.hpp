// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file StatisticsValues.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__PLOTJUGGLER_MSGS_MSG_STATISTICSVALUES_HPP
#define FAST_DDS_GENERATED__PLOTJUGGLER_MSGS_MSG_STATISTICSVALUES_HPP

#include <cstdint>
#include <utility>
#include <vector>

#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STATISTICSVALUES_SOURCE)
#define STATISTICSVALUES_DllAPI __declspec( dllexport )
#else
#define STATISTICSVALUES_DllAPI __declspec( dllimport )
#endif // STATISTICSVALUES_SOURCE
#else
#define STATISTICSVALUES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STATISTICSVALUES_DllAPI
#endif // _WIN32

namespace plotjuggler_msgs {

namespace msg {

/*!
 * @brief This class represents the structure StatisticsValues defined by the user in the IDL file.
 * @ingroup StatisticsValues
 */
class StatisticsValues
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StatisticsValues()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StatisticsValues()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StatisticsValues that will be copied.
     */
    eProsima_user_DllExport StatisticsValues(
            const StatisticsValues& x)
    {
                    m_header = x.m_header;

                    m_values = x.m_values;

                    m_names_version = x.m_names_version;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StatisticsValues that will be copied.
     */
    eProsima_user_DllExport StatisticsValues(
            StatisticsValues&& x) noexcept
    {
        m_header = std::move(x.m_header);
        m_values = std::move(x.m_values);
        m_names_version = x.m_names_version;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StatisticsValues that will be copied.
     */
    eProsima_user_DllExport StatisticsValues& operator =(
            const StatisticsValues& x)
    {

                    m_header = x.m_header;

                    m_values = x.m_values;

                    m_names_version = x.m_names_version;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StatisticsValues that will be copied.
     */
    eProsima_user_DllExport StatisticsValues& operator =(
            StatisticsValues&& x) noexcept
    {

        m_header = std::move(x.m_header);
        m_values = std::move(x.m_values);
        m_names_version = x.m_names_version;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StatisticsValues object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StatisticsValues& x) const
    {
        return (m_header == x.m_header &&
           m_values == x.m_values &&
           m_names_version == x.m_names_version);
    }

    /*!
     * @brief Comparison operator.
     * @param x StatisticsValues object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StatisticsValues& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs::msg::Header& _header)
    {
        m_header = _header;
    }

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs::msg::Header&& _header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs::msg::Header& header() const
    {
        return m_header;
    }

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs::msg::Header& header()
    {
        return m_header;
    }


    /*!
     * @brief This function copies the value in member values
     * @param _values New value to be copied in member values
     */
    eProsima_user_DllExport void values(
            const std::vector<double>& _values)
    {
        m_values = _values;
    }

    /*!
     * @brief This function moves the value in member values
     * @param _values New value to be moved in member values
     */
    eProsima_user_DllExport void values(
            std::vector<double>&& _values)
    {
        m_values = std::move(_values);
    }

    /*!
     * @brief This function returns a constant reference to member values
     * @return Constant reference to member values
     */
    eProsima_user_DllExport const std::vector<double>& values() const
    {
        return m_values;
    }

    /*!
     * @brief This function returns a reference to member values
     * @return Reference to member values
     */
    eProsima_user_DllExport std::vector<double>& values()
    {
        return m_values;
    }


    /*!
     * @brief This function sets a value in member names_version
     * @param _names_version New value for member names_version
     */
    eProsima_user_DllExport void names_version(
            uint32_t _names_version)
    {
        m_names_version = _names_version;
    }

    /*!
     * @brief This function returns the value of member names_version
     * @return Value of member names_version
     */
    eProsima_user_DllExport uint32_t names_version() const
    {
        return m_names_version;
    }

    /*!
     * @brief This function returns a reference to member names_version
     * @return Reference to member names_version
     */
    eProsima_user_DllExport uint32_t& names_version()
    {
        return m_names_version;
    }



private:

    std_msgs::msg::Header m_header;
    std::vector<double> m_values;
    uint32_t m_names_version{0};

};

} // namespace msg

} // namespace plotjuggler_msgs

#endif // _FAST_DDS_GENERATED_PLOTJUGGLER_MSGS_MSG_STATISTICSVALUES_HPP_


